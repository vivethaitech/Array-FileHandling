1. Count Character Occurrences:

public class CountOccurence {
	public static void main(String[] args) {
		CountOccurence count = new CountOccurence();
		Map<Character, Integer> result= count.countCharacters("vivetha");
		System.out.println(result);
	}	
	public Map<Character, Integer> countCharacters(String input) {		
		Map<Character, Integer> map = new LinkedHashMap<>();
		for(int i=0;i<input.length()-1;i++) {
			char c= input.charAt(i);
			if(map.containsKey(c)) {
				map.put(c, map.get(c)+1);
			}
			else {
				map.put(c, 1);
			}
		}
		return map;	    
	}
}

OUTPUT:
{v=2, i=1, e=1, t=1, h=1}
-------------------------------------------------------------------------------
2. Bubble sort

  public class BubbleSort {
	public static void main(String[] args) {
		BubbleSort bubble = new BubbleSort();
		int[] array= {18,23,14,12,30};
        bubble.bubbleSort(array);
        System.out.println(Arrays.toString(array));   
	}
	public void bubbleSort(int[] array) {
	    for(int i=0;i<array.length-1;i++) {
	    	for(int j=1;j<array.length-i;j++) {
	    		if(array[j-1]>array[j]) {
	    			int temp=array[j-1];
	    			array[j-1]=array[j];
	    			array[j]=temp;
	    		}
	    	}
	    }
	    
	}
}
------------------------------------------------------------------------------
3. Merge Two Array

  public class MergeTwoArray {

	public static void main(String[] args) {
		int[] array1= {10,20,30};
		int[] array2= {40,50,60};
		MergeTwoArray merge = new MergeTwoArray();
		System.out.print(Arrays.toString(merge.mergeArrays(array1, array2)));
	}
	public int[] mergeArrays(int[] array1, int[] array2) {
		  int[] mergeArray=new int[array1.length+array2.length];
	    	int  j=0;
	    for(int i=0;i<mergeArray.length;i++) {

	    	if(i<array1.length) {
	    		mergeArray[i]=array1[i];
	    	}
	    	else {
	    		mergeArray[i]=array2[j];
	    		j++;
	    	}
	    }
	    return mergeArray;
	}
}
--------------------------------------------------------------------------------
4. Reverse method with one more array

  public class ReverseString {
	
	public String reverseString(String input) {
	   char[] inputArray =input.toCharArray();
	   char[] revArray = new char[inputArray.length];
	   
	   for(int i=0,k=0;i<inputArray.length;i++,k++) {
		   revArray[k]=inputArray[inputArray.length-1-i];
	   }
	   String reversed = new String(revArray);
	   return reversed;
	}

	public static void main(String[] args) {
		ReverseString rev=new ReverseString();
		String output=rev.reverseString("chennai");
		System.out.println(output);

	}

}
  Reverse method without one more array

  public class ReverseWithoutNewArray {

	public static void main(String[] args) {
		ReverseWithoutNewArray rev = new ReverseWithoutNewArray();
		System.out.println(rev.reverseString("vivetha"));

	}
	public String reverseString(String input) {
		char[] ch = input.toCharArray();
		for(int left=0,right=input.length()-1;left<right;left++,right--) {
			char temp=ch[left];
			ch[left]=ch[right];
			ch[right]=temp;
		}

		return new String(ch);
	}
}
-----------------------------------------------------------------------------------
5.palindrome

  public class Palindrome {

	public static void main(String[] args) {
		Palindrome p = new Palindrome();
		System.out.println(p.isPalindrome("madam"));

	}
	public boolean isPalindrome(String input) {
		   char[] inputArray =input.toCharArray();

		   
		   for(int left=0,right=inputArray.length-1;left<right;left++,right--) {
			   char temp=inputArray[left];
			   inputArray[left]=inputArray[right];
			   inputArray[right]=temp;
		   }
		   String reversed = new String(inputArray);
		   if(reversed.equals(input))
			   return true;
		   else
			   return false;
	}
}
  -------------------------------------------------------------------------------------
